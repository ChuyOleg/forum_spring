Тема: Форум
Сутності: Тема, допис
Актори: Адміністратор, Зареєстрований користувач, Гість
Сценарії використання:
Гість: Перегляд тем та дописів
Зареєстрований користувач: + Створення дописів, Перегляд тем та дописів
Адміністратор: + Створення/редагування/видалення тем


Lab 2:
1. Отримайте у викладача номер варіанта для своєї бригади.
2. Створіть проект, який буде включати наступні модулі:
	- Spring Web;
	- Thymeleaf.
3. Компоненти рівня доступу до даних (@Repository) реалізуйте у вигляді заглушки (Stub або Fake). Повноцінна реалізація даного рівня передбачається у наступних лабораторних.
4. Рівень представлення реалізуйте у вигляді контролера (@Controller) та шаблонів (Thymeleaf) з мінімальною функціональністю, достатньою для демонстрації компонентів бізнес-логіки. Повноцінна реалізація даного рівня передбачається у наступних лабораторних.
5. На рівні сервісів (@Service) реалізуйте компоненти бізнес-логіки. При цьому в лабораторній роботі мають бути продемонстровані наступні можливості Spring Framework:
	- анотація @Component (@Repository, @Service, @Controller);
	- анотація @Bean;
	- створення бінів типу singleton та prototype;
	- ін’єкція залежностей через конструктор, сетер, та напряму у поле біна;


Lab 3:
1. У відповідності до номеру вашого варіанту отримайте від викладача назву шаблонізатора, який ви будете використовувати (Thymeleaf або JSP).
2. Для проекту з попередньої лабораторної роботи реалізуйте рівень представлення. Проект має функціонувати як веб-застосунок (контент генерується на сервері і у вигляді HTML відправляється не клієнт).
При цьому:
2.1) щонайменше один раз має бути використане умовне форматування (елементи if, unless, Elvis-operator);
2.2) щонайменше один раз має бути використаний елемент вибору (елементи switch/case, choose/when);
2.3) щонайменше один раз має бути використаний цикл (елементи each, forEach);
2.4) сайт має бути стійким до XSS-атак;
2.5) функціональність пов’язану з безпекою (аутентифікація та авторизація) в цій роботі можна не реалізовувати (це тема окремої лабораторної роботи).
3. Дайте відповіді на контрольні питання.


Lab 4:
1. Створіть обліковий запис на ресурсах «https://swagger.io/» та «https://www.postman.com/» (реєстрація безкоштовна). Встановіть на свій комп’ютер Postman Desktop Agent (встановлюється безкоштовно).

2. Для проекту з попередньої лабораторної роботи реалізуйте рівень представлення. Проект має функціонувати як RESTful вебсервіс.
При цьому:
2.1) має бути присутнім що найменше один ресурс, для якого реалізовані усі чотири CRUD-операції (create, read, update, delete);
2.2) щонайменше для одного ресурсу мають бути реалізовані функції фільтрації та пагінації;
2.3) усі операції мають повертати відповідний код стану HTTP в залежності від успішності чи неуспішності операції;
2.4) функції, пов’язані з безпекою, в цій роботі можуть бути не реалізовані.

3. До розроблених RESTful вебсервісів створіть документацію у форматі OpenAPI. Для кожної операції в документації має бути присутніми:
- короткий опис операції;
- повний опис операції;
- опис параметрів та/або моделей даних, які використовуються в цій операції;
- перелік кодів стану HTTP, які можуть надходити в результаті спроби виконання операції.

4. За допомогою Postman провести тестування розробленого API на відповідність опису у документації.


Lab 5:
1. Встановіть на свій комп’ютер реляційну СУБД (наприклад, Oracle XE) та інтегровану середу розробки для роботи з цією СУБД (наприклад, Oracle SQL Developer).

2. Для проекту з попередньої лабораторної роботи створіть таблиці та наповніть їх тестовими даними.
При цьому:
- щонайменше для однієї таблиці має бути передбачена можливість генерування значень первинних ключів за допомогою послідовностей (sequence), тригерів чи autoincrement-полів в залежності від обраної СУБД;
- структура та дані мають бути обрани таким чином, щоб на них можна було продемонструвати роботу як простих операцій над окремими записами, так і більш складних операції над кількома записами через транзакції.

3. Створіть проект SpringBoot.

4. На рівні Repository створіть інтерфейси та класи для реалізації DAO. Кожен DAO повинен мати щонайменше наступну функціональність:
- CRUD (create, read, update, delete); у випадку генерації первинних ключів на стороні БД, метод create має повертати згенероване значення первинного ключа;
- один чи декілька методів пошуку даних за обраними критеріями (крім пошуку за первинним ключем у методі read).

5. На рівні Service створіть інтерфейси та класи для реалізації бізнес-логіки. При цьому щонайменше один метод має бути транзакційним.

6. На рівні Controller забезпечте доступ до бізнес-логіки через RESTful API.

7. До розроблених RESTful вебсервісів створіть документацію у форматі OpenAPI. Для кожної операції в документації має бути присутніми:
- короткий опис операції;
- повний опис операції;
- опис параметрів та/або моделей даних, які використовуються в цій операції;
- перелік кодів стану HTTP, які можуть надходити в результаті спроби виконання операції.

8. За допомогою Postman або Swagger UI проведіть тестування розробленого API на відповідність опису у документації. Окремо перевірте як спрацьовують транзакційні методи у випадках відсутності та наявності помилок.
